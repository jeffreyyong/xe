// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeffreyyong/xe/calculator (interfaces: Engine)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	calculator "github.com/jeffreyyong/xe/calculator"
	"github.com/jeffreyyong/xe/model"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Recommend mocks base method
func (m *MockEngine) Recommend(arg0 model.RatesList) calculator.Signal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recommend", arg0)
	ret0, _ := ret[0].(calculator.Signal)
	return ret0
}

// Recommend indicates an expected call of Recommend
func (mr *MockEngineMockRecorder) Recommend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recommend", reflect.TypeOf((*MockEngine)(nil).Recommend), arg0)
}
