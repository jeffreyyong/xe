// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeffreyyong/xe/client (interfaces: HTTPClient)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v2 "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// GET mocks base method
func (m *MockHTTPClient) GET(arg0 string, arg1 interface{}) (*v2.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", arg0, arg1)
	ret0, _ := ret[0].(*v2.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GET indicates an expected call of GET
func (mr *MockHTTPClientMockRecorder) GET(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHTTPClient)(nil).GET), arg0, arg1)
}
